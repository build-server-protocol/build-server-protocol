## BSP Server remote interface

### JavacOptions: request

The build target scalac options request is sent from the client to the server to
query for the list of compiler options necessary to compile in a given list of
targets.

- method: `buildTarget/javacOptions`
- params: `JavacOptionsParams`
- result: `JavacOptionsResult`
#### JavacOptionsParams


```ts
export interface JavacOptionsParams {
  targets: BuildTargetIdentifier[];
}
```

#### BuildTargetIdentifier

A unique identifier for a target, can use any URI-compatible encoding as long as it is unique within the workspace.
Clients should not infer metadata out of the URI structure such as the path or query parameters, use `BuildTarget` instead.

```ts
export interface BuildTargetIdentifier {
  /** The targetâ€™s Uri */
  uri: URI;
}
```

#### URI

A resource identifier that is a valid URI according to rfc3986:
https://tools.ietf.org/html/rfc3986

```ts
export type URI = String;
```

#### JavacOptionsResult


```ts
export interface JavacOptionsResult {
  items: JavacOptionsItem[];
}
```

#### JavacOptionsItem


```ts
export interface JavacOptionsItem {
  target: BuildTargetIdentifier;

  /** Additional arguments to the compiler.
   * For example, -deprecation. */
  options: String[];

  /** The dependency classpath for this target, must be
   * identical to what is passed as arguments to
   * the -classpath flag in the command line interface
   * of javac. */
  classpath: String[];

  /** The output directory for classfiles produced by this target */
  classDirectory: String;
}
```

