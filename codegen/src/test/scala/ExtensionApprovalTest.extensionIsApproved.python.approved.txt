## Common shapes

#### PythonBuildTarget

`PythonBuildTarget` is a basic data structure that contains Python-specific
metadata, specifically the interpreter reference and the Python version.
This metadata is embedded in the `data: Option[Json]` field of the `BuildTarget` definition when
the `dataKind` field contains "python".

```ts
export interface PythonBuildTarget {
  version?: String;

  interpreter?: URI;
}
```

#### URI

A resource identifier that is a valid URI according to rfc3986:
https://tools.ietf.org/html/rfc3986

```ts
export type URI = String;
```


## BSP Server remote interface

### PythonOptions: request

The Python Options Request is sent from the client to the server to
query for the list of the interpreter flags used to run a given list of
targets.

- method: `buildTarget/pythonOptions`
- params: `PythonOptionsParams`
- result: `PythonOptionsResult`
#### PythonOptionsParams


```ts
export interface PythonOptionsParams {
  targets: BuildTargetIdentifier[];
}
```

#### BuildTargetIdentifier

A unique identifier for a target, can use any URI-compatible encoding as long as it is unique within the workspace.
Clients should not infer metadata out of the URI structure such as the path or query parameters, use `BuildTarget` instead.

```ts
export interface BuildTargetIdentifier {
  /** The targetâ€™s Uri */
  uri: URI;
}
```

#### PythonOptionsResult


```ts
export interface PythonOptionsResult {
  items: PythonOptionsItem[];
}
```

#### PythonOptionsItem


```ts
export interface PythonOptionsItem {
  target: BuildTargetIdentifier;

  /** Attributes added to the interpreter command
   * For example: -E */
  interpreterOptions: String[];
}
```

